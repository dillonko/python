#!/usr/bin/env python
# -*- coding: iso-8859-15 -*-
# generated by wxGlade 0.6.3 on Wed Jul 30 17:48:03 2008
##############################################################################
# This is a very quick and dirty SaunaSMS
##############################################################################
# This script will contact oma.saunalahti.fi and provides the sms service
##############################################################################
#    SaunaSMS is a small quick and dirty script which will provide a free
#    sms service for Saunalahti (http://www.saunalahti.fi) customers.
#
#    Copyright (C) 2008  Juhapekka Piiroinen
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.
#############################################################################
# Contact: juhapekka.piiroinen@gmail.com
# Version: 0.3.6
#############################################################################

import wx,os
import sys
import locale
locale.setlocale(locale.LC_ALL, 'fi')
try:
    sys.setdefaultencoding('iso-8859-1')
except:
    pass
import time
import urllib2, cookielib, re
import gzip
import StringIO
import ConfigParser


# begin wxGlade: extracode
# end wxGlade
global G_SW_USERAGENT,G_SW_COPYRIGHT,G_SW_WEBSITE,G_SW_LICENSE,G_SW_DEVELOPER,G_SW_NAME
global G_SW_DOCWRITER,G_SW_ARTIST,G_SW_TRANSLATOR,G_SW_DESCRIPTION,G_SW_VERSION
G_SW_NAME = "SaunaSMS"
G_SW_VERSION = "0.3.6"
G_SW_DESCRIPTION = """
SaunaSMS on työpöytäohjelma,
jonka avulla voit lähettää ilmaisia
tekstiviestejä kirjautumatta nettiselaimellasi
oma.saunalahti.fi -palveluun.

Ohjelman käyttäminen vaatii että sinulla on
olemassa oleva tunnus oma saunalahti -palveluun,
sekä että sinulla on ilmaisia tekstiviestejä
jäljellä.

Muutokset versioon 0.3 verrattuna:
 - SMS viestilokin kirjoituksen rivinvaihto puuttui
 - gzip/deflate tuki lisätty, mutta oma saunalahti ei tue
 - osoitekirjaan lisääminen
 - VCard import
 - uusia pikanäppäimiä
 - user agentin vaihtaminen
 - VCard import kaikista kansioista (a.k.a seek and destroy)
 - muistaa user agentin
 - voit tyhjentää osoitekirjan
 - parannettu saldo kyselyä
 - kielen vaihtaminen
 - oletuslähettäjän valinta
 - käyttäjätunnuskohtainen asetustiedosto
 - pikanäppäimien kustomointi
 - osoitekirjasta poistaminen yksitellen
 - BUGI KORJAUS: tyhjä saunasms.add estää ohjelman käynnistyksen
"""


G_SW_COPYRIGHT = "(C) 2008 Juhapekka Piiroinen"
G_SW_WEBSITE = ("http://code.google.com/p/quickanddirty","Google Code -projektisivu")
G_SW_LICENSE = "Closed Source / Freeware\nKoodi julkaistaan myöhemmin GNU/GPLv3 lisenssi alaisuuteen"
G_SW_DEVELOPER = "Juhapekka Piiroinen"
G_SW_DOCWRITER = "Juhapekka Piiroinen"
G_SW_ARTIST = "Juhapekka Piiroinen"
G_SW_TRANSLATOR = "Juhapekka Piiroinen"

global G_CON_USERAGENT, G_CON_DEFAULT_SENDER, G_CON_ACCEPT_ENCODING, G_CON_REFERER
G_CON_USERAGENT = 'Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.8.1.14) Gecko/20080404 Firefox/2.0.0.14'
G_CON_DEFAULT_SENDER = ''
G_CON_ACCEPT_ENCODING = "gzip,x-gzip,deflate"
G_CON_REFERER = "https://oma.saunalahti.fi/settings/"

global G_UI_LANGUAGE
G_UI_LANGUAGE = "saunasms_fi"

global G_FILE_ADD,G_FILE_LOG,G_FILE_HLP
global G_FILE_LOG_EXE,G_FILE_LOG_MSG
G_FILE_ADD = "saunasms.add"
G_FILE_LOG = "saunasms.log"
G_FILE_HLP = "saunasms.ohje"
G_FILE_LOG_EXE = "saunasms.exe.log"
G_FILE_LOG_MSG = "saunasms.msg"

global G_FILE_CFG
G_FILE_CFG = "saunasms.cfg"

global G_QUICK_NEW, G_QUICK_HELP, G_QUICK_LANGUAGE, G_QUICK_PROPERTIES, G_QUICK_SEND, G_QUICK_BALANCE, G_QUICK_QUIT
global G_QUICK_NEW_CONTACT, G_QUICK_IMPORT_VCARD_ONE, G_QUICK_IMPORT_VCARD_MULTIPLE
G_QUICK_NEW = "Ctrl+N"
G_QUICK_SEND = "Ctrl+P"
G_QUICK_BALANCE = "Ctrl+L"
G_QUICK_QUIT = "Ctrl+Q"
G_QUICK_NEW_CONTACT = "Ctrl+U"
G_QUICK_IMPORT_VCARD_ONE = "Ctrl+V"
G_QUICK_IMPORT_VCARD_MULTIPLE = "Ctrl+B"
G_QUICK_PROPERTIES = "Ctrl+A"
G_QUICK_LANGUAGE = "Ctrl+K"
G_QUICK_HELP = "Ctrl+H"


_ = wx.GetTranslation


def GetValue(section,option,default=""):
    cp = ConfigParser.SafeConfigParser()
    cp.read(G_FILE_CFG)
    f = open(G_FILE_CFG,"w")
    retval = ""
    process_ok = True
    try:
        retval = cp.get(section,option)
    except ConfigParser.NoSectionError:
        cp.add_section(section)
        process_ok = False
    except ConfigParser.NoOptionError:
        cp.set(section,option,default)
        process_ok = False
    cp.write(f)
    f.close()
    if process_ok == False:
        retval = GetValue(section,option)    
    return retval

def SetValue(section,option,value):
    cp = ConfigParser.SafeConfigParser()
    cp.read(G_FILE_CFG)
    f = open(G_FILE_CFG,"w")
    cp.set(section,option,value)
    cp.write(f)
    f.close()

def prepareData(data):
	import re
	#tags = re.compile(r'<.*?>')
	space = re.compile(r'\s+')
	#data = tags.sub('',data)
	data = space.sub(' ',data)
	data = data.replace("\r","")
	data = data.replace("\n","")
	return data

def prepareSMSForLog(data):
	import re
	space = re.compile(r'\s+')
	data = space.sub(' ',data)
	data = data.replace("\r","")
	data = data.replace("\n","")
	data = data.replace(";","")
	return data

def sentStatus(d):
	d = re.search(r'<span class=\"error\">[A-Za-zäö. ]*</span>',d).group(0)
	d = d.replace("<span class=\"error\">","")
	d = d.replace("</span>","")
	return d.strip()
def sentStatus2(d):
	d = re.search(r'<p><span class=\"error\">.*</span></p>',d).group(0)
	d = d.replace("<p><span class=\"error\">","")
	d = d.replace("</span></p>","")
	return d.strip()	
def totalSent(d):
	d = re.search(r'Lähetettyjä viestejä\: [0-9]*',d).group(0)
	d = d.replace("Lähetettyjä viestejä: ","")
	return d.strip()

def senderList(d):
    d = re.findall(r">[0-9]+<",d)
    ret = []
    for s in d:
        s = s.replace("<","").replace(">","")
        ret.append(s)
    return ret

def smsLeftMonth(d):
	d = re.search(r'Kuukausittaisia viestejä jäljellä\: [0-9]*',d).group(0)
	d = d.replace("Kuukausittaisia viestejä jäljellä: ","")
	return d.strip()

def smsLeftTemp(d):
	d = re.search(r'Kertakäyttöisiä viestejä jäljellä\: [0-9]*',d).group(0)
	d = d.replace("Kertakäyttöisiä viestejä jäljellä: ","")
	return d.strip()

def testLoginLog(msg):
       global G_FILE_LOG
       msg = "["+testLoginGetStamp()+"] "+msg+"\n"
       f = open(G_FILE_LOG,"a")
       f.write(msg)
       f.close()
       
def testLoginGetStamp():
       return time.strftime("%x %X")

def decode(s):
    encoding = s.info().get("Content-Encoding")
    if encoding in ('gzip', 'x-gzip', 'deflate'):
        content = s.read()
        if encoding == 'deflate':
            data = StringIO.StringIO(zlib.decompress(content))
        else:
            data = gzip.GzipFile('', 'rb', 9, StringIO.StringIO(content))
        page = data.read()
    else:
        page = s.read()
    return page

def testLogin(username,password):
    global G_CON_USERAGENT, G_CON_DEFAULT_SENDER, G_CON_ACCEPT_ENCODING, G_CON_REFERER
    u = 'https://oma.saunalahti.fi/settings/smsSend'
    d = r"username="+username+r"&login=Sisään&password="+password
    c = cookielib.CookieJar()
    testLoginLog(_("Opening connection to oma.saunalahti.fi.."))
    o = urllib2.build_opener(urllib2.HTTPCookieProcessor(c))
    o.addheaders = [('Referer', G_CON_REFERER),
        ('Content-Type', 'application/x-www-form-urlencoded'),
        ('User-Agent', G_CON_USERAGENT),
        ('Accept-Encoding', G_CON_ACCEPT_ENCODING)]
    s= o.open(u, d)
    testLoginLog(_("Connection opened. Reading data.."))
    p = decode(s)
    testLoginLog(_("Data read. Closing connection.."))
    s.close()
    testLoginLog(_("Connection Closed. Validating data.."))
    #print p
    try:
        status = sentStatus2(prepareData(p))
    except AttributeError:
        msg = _("Monthly SMS left")+": %s\n" % smsLeftMonth(prepareData(p))
        msg += _("Single-use SMS left")+": %s\n" % smsLeftTemp(prepareData(p))
        msg += _("Sent SMS")+": %s\n" % totalSent(prepareData(p))
        testLoginLog(_("Data validated. Login OK! :)"))
        return False,msg,senderList(prepareData(p))
    testLoginLog(_("Data validated. Login Failed! :("))
    return status,False,False

def sendSms(username,password,sender,recipients,sms):
	global G_CON_USERAGENT, G_CON_DEFAULT_SENDER, G_CON_ACCEPT_ENCODING, G_CON_REFERER
	multiple = 0
	msgs = []
	if len(sms)>160:
		multiple = len(sms)/160 + 1
		last = 0
		for i in range(0,multiple):
			msgs.append(sms[i*160:i*160+160])
			last = i
	else:
		msgs.append(sms)

	for i in msgs:
		sms = i
		u = 'https://oma.saunalahti.fi/settings/smsSend'
		d = r"username="+username+r"&login=Sisään&password="+password
		c = cookielib.CookieJar()
		o = urllib2.build_opener(urllib2.HTTPCookieProcessor(c))
		o.addheaders = [('Referer', G_CON_REFERER),
					('Content-Type', 'application/x-www-form-urlencoded'),
					('User-Agent', G_CON_USERAGENT),
					('Accept-Encoding', G_CON_ACCEPT_ENCODING)]
		d = d+"&sender="+sender+"&recipients="+recipients+"&text="+sms+"&size="+str(len(sms))+"&send=Lähetä"
		s = o.open(u,d)
		d = decode(s)
		s.close()
	return d

class Login(wx.Dialog):
    def __init__(self, *args, **kwds):
        # begin wxGlade: Login.__init__
        global G_FILE_USR
        global G_UI_LANGUAGE
        self.mylocale = wx.Locale()
        self.mylocale.AddCatalogLookupPathPrefix('.')
        self.mylocale.AddCatalog(G_UI_LANGUAGE)        
        kwds["style"] = wx.DEFAULT_DIALOG_STYLE
        wx.Dialog.__init__(self, *args, **kwds)
        
        d = GetValue("Connection","Username")
   
        self.label_1 = wx.StaticText(self, -1, _("Username")+":")
        self.username = wx.TextCtrl(self, -1, "")
        self.username.SetValue(d)
        self.label_2 = wx.StaticText(self, -1, _("Password")+":")
        self.password = wx.TextCtrl(self, -1, "",style=wx.TE_PASSWORD)
        self.login = wx.Button(self, -1, _("Login"))
        icon = wx.Icon("favicon.ico", wx.BITMAP_TYPE_ICO)
        self.SetIcon(icon)
        self.__set_properties()
        self.__do_layout()
        # end wxGlade
    def SetLabels(self,eka,toka,button):
        self.label_1.SetLabel(eka)
        self.label_2.SetLabel(toka)
        self.login.SetLabel(button)
        
    def __set_properties(self):
        # begin wxGlade: Login.__set_properties
        self.SetTitle(_("oma.saunalahti.fi - login"))
        self.label_1.SetMinSize((90, 20))
        self.username.SetMinSize((180, 20))
        self.label_2.SetMinSize((90, 20))
        self.password.SetMinSize((180, 20))
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: Login.__do_layout
        sizer_1 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_2 = wx.BoxSizer(wx.VERTICAL)
        sizer_4 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_3 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_3.Add(self.label_1, 0, 0, 0)
        sizer_3.Add(self.username, 0, 0, 0)
        sizer_2.Add(sizer_3, 1, wx.EXPAND, 0)
        sizer_4.Add(self.label_2, 0, 0, 0)
        sizer_4.Add(self.password, 0, 0, 0)
        sizer_2.Add(sizer_4, 1, wx.EXPAND, 0)
        sizer_1.Add(sizer_2, 1, wx.EXPAND, 0)
        sizer_1.Add(self.login, 0, 0, 0)
        self.SetSizer(sizer_1)
        sizer_1.Fit(self)
        self.Layout()
        # end wxGlade

# end of class Login


class Kysy(wx.Dialog):
    def __init__(self, *args, **kwds):
        # begin wxGlade: Login.__init__
        global G_UI_LANGUAGE
        self.mylocale = wx.Locale()
        self.mylocale.AddCatalogLookupPathPrefix('.')
        self.mylocale.AddCatalog(G_UI_LANGUAGE)       
        kwds["style"] = wx.DEFAULT_DIALOG_STYLE
        wx.Dialog.__init__(self, *args, **kwds)
        self.label_1 = wx.StaticText(self, -1, u"eka:")
        self.eka = wx.TextCtrl(self, -1, "")
        self.label_2 = wx.StaticText(self, -1, "toka:")
        self.toka = wx.TextCtrl(self, -1, "")
        self.ok = wx.Button(self, wx.ID_OK, u"Ok")
        icon = wx.Icon("favicon.ico", wx.BITMAP_TYPE_ICO)
        self.SetIcon(icon)
        self.__set_properties()
        self.__do_layout()
        # end wxGlade
    def SetLabels(self,eka,toka,button,title):
        if eka!=None:
            self.label_1.SetLabel(eka)
        else:
            del self.label_1
            del self.eka
        if toka!=None:
            self.label_2.SetLabel(toka)
        else:
            del self.label_2
            del toka
        self.ok.SetLabel(button)
        self.SetTitle(title)
        
    def __set_properties(self):
        # begin wxGlade: Login.__set_properties
        self.SetTitle("Kysy")
        self.label_1.SetMinSize((90, 20))
        self.eka.SetMinSize((180, 20))
        self.label_2.SetMinSize((90, 20))
        self.toka.SetMinSize((180, 20))
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: Login.__do_layout
        sizer_1 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_2 = wx.BoxSizer(wx.VERTICAL)
        sizer_4 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_3 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_3.Add(self.label_1, 0, 0, 0)
        sizer_3.Add(self.eka, 0, 0, 0)
        sizer_2.Add(sizer_3, 1, wx.EXPAND, 0)
        sizer_4.Add(self.label_2, 0, 0, 0)
        sizer_4.Add(self.toka, 0, 0, 0)
        sizer_2.Add(sizer_4, 1, wx.EXPAND, 0)
        sizer_1.Add(sizer_2, 1, wx.EXPAND, 0)
        sizer_1.Add(self.ok, 0, 0, 0)
        self.SetSizer(sizer_1)
        sizer_1.Fit(self)
        self.Layout()
        # end wxGlade

# end of class Login

class LogReader(wx.Dialog):
    def __init__(self, *args, **kwds):
        # begin wxGlade: LogReader.__init__
        kwds["style"] = wx.DEFAULT_DIALOG_STYLE|wx.MINIMIZE_BOX|wx.STAY_ON_TOP
        wx.Dialog.__init__(self, *args, **kwds)
        global G_UI_LANGUAGE
        self.mylocale = wx.Locale()
        self.mylocale.AddCatalogLookupPathPrefix('.')
        self.mylocale.AddCatalog(G_UI_LANGUAGE)         
        self.text_ctrl_1 = wx.TextCtrl(self, -1, "", style=wx.TE_MULTILINE|wx.TE_READONLY)

        self.__set_properties()
        self.__do_layout()
        # end wxGlade

    def __set_properties(self):
        # begin wxGlade: LogReader.__set_properties
        self.SetTitle("Loki")
        self.SetSize((400, 300))
        self.text_ctrl_1.SetMinSize((390,280))
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: LogReader.__do_layout
        sizer_2 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_2.Add(self.text_ctrl_1, 0, wx.EXPAND, 0)
        self.SetSizer(sizer_2)
        self.Layout()
        # end wxGlade
        
    def SetFile(self,filename):
        f = open(filename,"r")
        self.text_ctrl_1.SetValue(f.read())
        f.close()

# end of class LogReader



class SaunaSMS(wx.Frame):
    def __init__(self, *args, **kwds):
        global G_QUICK_NEW, G_QUICK_HELP, G_QUICK_LANGUAGE, G_QUICK_PROPERTIES, G_QUICK_SEND, G_QUICK_BALANCE, G_QUICK_QUIT
        global G_QUICK_NEW_CONTACT, G_QUICK_IMPORT_VCARD_ONE, G_QUICK_IMPORT_VCARD_MULTIPLE
        # begin wxGlade: SaunaSMS2.__init__
        global G_UI_LANGUAGE
        self.mylocale = wx.Locale()
        self.mylocale.AddCatalogLookupPathPrefix('.')
        self.mylocale.AddCatalog(G_UI_LANGUAGE) 
        kwds["style"] = wx.CAPTION| wx.SYSTEM_MENU | wx.CLOSE_BOX|wx.MINIMIZE_BOX|wx.STAY_ON_TOP #wx.DEFAULT_FRAME_STYLE | wx.SIMPLE_BORDERwx.ICONIZE | 
        wx.Frame.__init__(self, *args, **kwds)
        self.username = ""
        self.password = ""
        self.lstosoitekirja = self.__get_contacts()
        self.lbllahettaja = wx.StaticText(self, -1, _("Sender")+":")
        self.cmbLahettaja = wx.ComboBox(self, -1, choices=["034534", "13453"], style=wx.CB_DROPDOWN)
        self.lblvastaanottaja = wx.StaticText(self, -1, _("Recipient(s)")+":")
        self.txtvastaanottaja = wx.TextCtrl(self, -1, "")
        self.lblviesti = wx.StaticText(self, -1, _("Message")+":")
        self.txtviesti = wx.TextCtrl(self, -1, "", style=wx.TE_MULTILINE)
        self.txtviesti.Bind(wx.EVT_TEXT, self.OnWrite)
        self.Centre()
        # Menu Bar
        self.frmSaunaSMS_menubar = wx.MenuBar()

        self.mnusms = wx.Menu()
        self.mnusmsuusi = wx.MenuItem(self.mnusms, wx.NewId(), _("New Message")+"\t"+G_QUICK_NEW, "", wx.ITEM_NORMAL)
        self.doBind(self.mnusms.AppendItem(self.mnusmsuusi),self.OnNewSMS)
        self.mnusmslaheta = wx.MenuItem(self.mnusms, wx.NewId(), _("Send Message")+"\t"+G_QUICK_SEND, "", wx.ITEM_NORMAL)
        self.doBind(self.mnusms.AppendItem(self.mnusmslaheta),self.OnSendSMS)
        self.mnusms.AppendSeparator()
        self.mnusmsstats = wx.MenuItem(self.mnusms, wx.NewId(), _("Check Balance")+"\t"+G_QUICK_BALANCE, "", wx.ITEM_NORMAL)
        self.doBind(self.mnusms.AppendItem(self.mnusmsstats),self.OnCheckStats)
        self.mnusms.AppendSeparator()
        self.mnusmsquit = wx.MenuItem(self.mnusms, wx.NewId(), _("Quit")+"\t"+G_QUICK_QUIT, "", wx.ITEM_NORMAL)

        self.doBind(self.mnusms.AppendItem(self.mnusmsquit),self.OnClose)

        self.frmSaunaSMS_menubar.Append(self.mnusms, _("SMS"))
        
        self.mnuosoitekirja = wx.Menu()
        
        self.mnuosoitekirjauusi = wx.MenuItem(self.mnuosoitekirja, wx.NewId(), _("Add new contact")+"\t"+G_QUICK_NEW_CONTACT, "", wx.ITEM_NORMAL)
        
        self.doBind(self.mnuosoitekirja.AppendItem(self.mnuosoitekirjauusi),self.OnAddContact)
        
        self.mnuosoitekirja.AppendSeparator()
        mnuosoitekirjatuo = wx.Menu()
        
        self.mnuosoitekirjatuovcf = wx.MenuItem(mnuosoitekirjatuo, wx.NewId(), _("Single VCF / VCard")+"\t"+G_QUICK_IMPORT_VCARD_ONE, "", wx.ITEM_NORMAL)
        self.doBind(mnuosoitekirjatuo.AppendItem(self.mnuosoitekirjatuovcf),self.OnImportCSV)
        self.mnuosoitekirjatuovcfuseita = wx.MenuItem(mnuosoitekirjatuo, wx.NewId(), _("Multiple VCF / VCard")+"\t"+ G_QUICK_IMPORT_VCARD_MULTIPLE, "", wx.ITEM_NORMAL)
        self.doBind(mnuosoitekirjatuo.AppendItem(self.mnuosoitekirjatuovcfuseita),self.OnImportCSVUseita)        
        
        
        self.mnuosoitekirja.AppendMenu(wx.NewId(), _("Import"), mnuosoitekirjatuo, "")
        self.mnuosoitekirja.AppendSeparator()
        mnuosoitekirjatyhjenna = wx.Menu()
        self.mnuosoitekirjatyhjennanyt = wx.MenuItem(mnuosoitekirjatyhjenna, wx.NewId(), _("Now"), "", wx.ITEM_NORMAL)
        self.doBind(mnuosoitekirjatyhjenna.AppendItem(self.mnuosoitekirjatyhjennanyt),self.OnAddressClear)
        self.mnuosoitekirja.AppendMenu(wx.NewId(), _("Clear"), mnuosoitekirjatyhjenna, "")
        self.frmSaunaSMS_menubar.Append(self.mnuosoitekirja, _("Address Book"))
        self.mnuasetukset = wx.Menu()
        mnuasetuksetloki = wx.Menu()
        self.mnuasetuksetlokisms = wx.MenuItem(mnuasetuksetloki, wx.NewId(), _("Message Log"), "", wx.ITEM_NORMAL)
        self.doBind(mnuasetuksetloki.AppendItem(self.mnuasetuksetlokisms),self.OnLogSMS)
        
        self.mnuasetuksetproperties = wx.MenuItem(self.mnuasetukset, wx.NewId(), _("Properties")+"\t"+G_QUICK_PROPERTIES, "", wx.ITEM_NORMAL)
        self.doBind(self.mnuasetukset.AppendItem(self.mnuasetuksetproperties),self.OnProperties)
        self.mnuasetukset.AppendSeparator()
        self.mnuasetuksetlanguage = wx.MenuItem(self.mnuasetukset, wx.NewId(), _("Change Language")+"\t"+G_QUICK_LANGUAGE, "", wx.ITEM_NORMAL)
        self.doBind(self.mnuasetukset.AppendItem(self.mnuasetuksetlanguage),self.OnChangeLanguage)
        
        self.mnuasetukset.AppendSeparator()        
        self.mnuasetuksetlokitapahtuma = wx.MenuItem(mnuasetuksetloki, wx.NewId(), _("Event Log"), "", wx.ITEM_NORMAL)
        self.doBind(mnuasetuksetloki.AppendItem(self.mnuasetuksetlokitapahtuma),self.OnLogEvents)
        
        self.mnuasetuksetlokibugi = wx.MenuItem(mnuasetuksetloki, wx.NewId(), _("Bug Log"), "", wx.ITEM_NORMAL)
        self.doBind(mnuasetuksetloki.AppendItem(self.mnuasetuksetlokibugi),self.OnLogCrash)
        
        self.mnuasetukset.AppendMenu(wx.NewId(), _("Show"), mnuasetuksetloki, "")
        self.frmSaunaSMS_menubar.Append(self.mnuasetukset, _("Settings"))
        
        self.mnutietoja = wx.Menu()
        self.mnutietojaohje = wx.MenuItem(self.mnutietoja, wx.NewId(), _("User Manual")+"\t"+G_QUICK_HELP, "", wx.ITEM_NORMAL)
        
        self.doBind(self.mnutietoja.AppendItem(self.mnutietojaohje),self.OnTietojaKayttohje)
        self.mnutietoja.AppendSeparator()
        self.mnutietojaohjelmasta = wx.MenuItem(self.mnutietoja, wx.NewId(), _("About Software"), "", wx.ITEM_NORMAL)
        
        self.doBind(self.mnutietoja.AppendItem(self.mnutietojaohjelmasta),self.OnTietojaOhjelmasta)
        self.frmSaunaSMS_menubar.Append(self.mnutietoja, _("Info"))
        self.SetMenuBar(self.frmSaunaSMS_menubar)
        # Menu Bar end
        self.frmSaunaSMS_statusbar = self.CreateStatusBar(4, 0)
        

        self.Bind(wx.EVT_CLOSE,self.OnClose)
        self.Bind(wx.EVT_ICONIZE, self.OnIconify)
        
 
        icon = wx.Icon("favicon.ico", wx.BITMAP_TYPE_ICO)
        self.SetIcon(icon)
        #self.frmSaunaSMS_menubar.EnableTop(1,True)
        
        self.lstosoitekirja.Bind(wx.EVT_LISTBOX_DCLICK,self.OnAddReceiver)
        self.__set_properties()
        self.__do_layout()
                # end wxGlade


    def __get_contacts(self):
        global G_FILE_ADD
        try:
            f = open(G_FILE_ADD,"r")
            self.book = f.readlines()
            f.close()
        except IOError:
            f = open(G_FILE_ADD,"w")
            f.write(_("Open")+" "+G_FILE_ADD+";121324324\n")
            f.close
            self.book = []
            self.book.append(_("Open")+" "+G_FILE_ADD+";121324324\n")
        names = []
        for line in self.book:
            names.append(line.split(";")[0])
        return wx.ListBox(self, -1, choices=names, style=wx.LB_SINGLE)

    def __reload_contacts(self):
        global G_FILE_ADD
        try:
            f = open(G_FILE_ADD,"r")
            self.book = f.readlines()
            f.close()
        except IOError:
            f = open(G_FILE_ADD,"w")
            f.write(_("Open")+" "+G_FILE_ADD+";121324324\n")
            f.close
            self.book = []
            self.book.append(_("Open")+" "+G_FILE_ADD+";121324324\n")
        names = []
        for line in self.book:
            names.append(line.split(";")[0])
        self.lstosoitekirja.SetItems(names)
        
    def doBind(self,item, handler):
        self.Bind(wx.EVT_MENU, handler, item)
    
    def OnChangeLanguage(self,evt):
        global G_UI_LANGUAGE
        self.frmSaunaSMS_statusbar.SetStatusText(_("changing language.."), 2)
        dlg = wx.FileDialog(self,_("Select language file"),style=wx.OPEN)
        dlg.SetWildcard("*.mo")
        if dlg.ShowModal() == wx.ID_OK:
            G_UI_LANGUAGE = os.path.splitext(dlg.GetPath())[0]
            G_UI_LANGUAGE = G_UI_LANGUAGE.replace(os.path.dirname(G_UI_LANGUAGE),"").replace(os.path.sep,"")
            SetValue("GUI","G_UI_LANGUAGE",G_UI_LANGUAGE)
            wx.MessageBox(_("You will need to restart the software to apply changes"),_("Software restart required"))

        self.frmSaunaSMS_statusbar.SetStatusText(_("language has been changed!"), 2)
        
    def OnProperties(self,evt):
        global G_CON_USERAGENT, G_CON_DEFAULT_SENDER
        lisaa = Kysy(self, -1, "")
        lisaa.SetLabels(_("User Agent"),_("Default Sender"),_("Apply"),_("Properties"))
        lisaa.eka.SetValue(G_CON_USERAGENT)
        lisaa.toka.SetValue(G_CON_DEFAULT_SENDER)
        lisaa.ShowModal()
        
        try:
            senders = self.cmbLahettaja.GetItems()
            self.cmbLahettaja.SetSelection(senders.index(lisaa.toka.GetValue()))
            G_CON_DEFAULT_SENDER = lisaa.toka.GetValue()
        except ValueError:
            wx.MessageBox(_("Default sender not changed"),_("Sender value invalid"))

        G_CON_USERAGENT = lisaa.eka.GetValue()
        SetValue("Connection","G_SW_USERAGENT",G_CON_USERAGENT)
        SetValue("SMS","G_CON_DEFAULT_SENDER",G_CON_DEFAULT_SENDER)
        

    def OnAddressClear(self,evt):
        global G_FILE_ADD
        self.lstosoitekirja.Clear()
        f = open(G_FILE_ADD,"w")
        f.write("")
        f.close()
        wx.MessageBox(_("So Long My Contacts :D"),_("Address Book has been cleared!"))

    def OnClose(self,evt):
        dlg = wx.MessageDialog(None, _("Are you sure?"), _("Software is been closed"), wx.YES_NO | wx.NO_DEFAULT | wx.ICON_QUESTION)
        if (dlg.ShowModal() == wx.ID_YES):
            app.ExitMainLoop()
       
    def __set_properties(self):
        global G_SW_NAME
        # begin wxGlade: SaunaSMS2.__set_properties
        self.SetTitle(G_SW_NAME)
        _icon = wx.EmptyIcon()
        _icon.CopyFromBitmap(wx.Bitmap("favicon.ico", wx.BITMAP_TYPE_ANY))
        self.SetIcon(_icon)
        self.SetBackgroundColour(wx.SystemSettings_GetColour(wx.SYS_COLOUR_3DLIGHT))
        self.lstosoitekirja.SetMinSize((150, 400))
        self.cmbLahettaja.SetSelection(0)
        self.txtviesti.SetMinSize((600,200))
        self.frmSaunaSMS_statusbar.SetStatusWidths([160, 50, 240, 120])
        # statusbar fields
        frmSaunaSMS_statusbar_fields = [_("Username")+": %s" % self.username, "0 (0)", G_SW_COPYRIGHT]
        for i in range(len(frmSaunaSMS_statusbar_fields)):
            self.frmSaunaSMS_statusbar.SetStatusText(frmSaunaSMS_statusbar_fields[i], i)
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: SaunaSMS2.__do_layout
        sizIkkuna = wx.BoxSizer(wx.VERTICAL)
        sizVasen = wx.BoxSizer(wx.HORIZONTAL)
        sizOikea = wx.FlexGridSizer(wx.VERTICAL)
        sizOikeaAla = wx.BoxSizer(wx.VERTICAL)
        sizOikeaYla = wx.BoxSizer(wx.VERTICAL)
        sizOikeaYlaVastaanottaja = wx.BoxSizer(wx.VERTICAL)
        sizOikeaYlaLahettaja = wx.BoxSizer(wx.VERTICAL)
        sizVasen.Add(self.lstosoitekirja, 0, wx.EXPAND, 0)
        sizOikeaYlaLahettaja.Add(self.lbllahettaja, 0, wx.EXPAND, 0)
        sizOikeaYlaLahettaja.Add(self.cmbLahettaja, 0, wx.EXPAND, 0)
        sizOikeaYla.Add(sizOikeaYlaLahettaja, 1, wx.EXPAND, 0)
        sizOikeaYlaLahettaja.SetDimension(0,0,100,40)
        sizOikeaYlaVastaanottaja.Add(self.lblvastaanottaja, 0, wx.EXPAND, 0)
        sizOikeaYlaVastaanottaja.Add(self.txtvastaanottaja, 0, wx.EXPAND, 0)
        sizOikeaYla.Add(sizOikeaYlaVastaanottaja, 1, wx.EXPAND, 0)
        sizOikea.Add(sizOikeaYla, 1, wx.EXPAND, 0)
        sizOikeaAla.Add(self.lblviesti, 0, wx.EXPAND, 0)
        sizOikeaAla.Add(self.txtviesti, 1, wx.EXPAND, 0)
        sizOikea.Add(sizOikeaAla, 1, wx.EXPAND, 0)
        sizVasen.Add(sizOikea, 1, wx.EXPAND, 0)
        sizIkkuna.Add(sizVasen, 1, wx.EXPAND, 0)
        self.SetSizer(sizIkkuna)
        sizIkkuna.Fit(self)
        self.Layout()
        self.SetSize((400,300))
        # end wxGlade
    
    def OnTietojaKayttohje(self,evt):
        global G_SW_NAME,G_FILE_HLP
        text = G_SW_NAME+" - "+_("User Manual")+"\n===================================================\n"
        f = open(G_FILE_HLP,"r")
        text += f.read()
        f.close()
        text += "===================================================\n"
        dlg = wx.MessageDialog ( self, text, G_SW_NAME+" - "+_("User Manual"),style=wx.OK)
        dlg.ShowModal()

    def OnTietojaOhjelmasta(self, event):
        info = wx.AboutDialogInfo()
        info.SetIcon(wx.Icon('favicon.ico', wx.BITMAP_TYPE_ICO))
        info.SetName(G_SW_NAME)
        info.SetVersion(G_SW_VERSION)
        info.SetDescription(G_SW_DESCRIPTION)
        info.SetCopyright(G_SW_COPYRIGHT)
        info.SetWebSite(G_SW_WEBSITE)
        info.SetLicence(G_SW_LICENSE)
        info.AddDeveloper(G_SW_DEVELOPER)
        #info.AddDocWriter(G_SW_DOCWRITER)
        #info.AddArtist(G_SW_ARTIST)
        info.AddTranslator(G_SW_TRANSLATOR)
        wx.AboutBox(info)
    
    def OnLogCrash(self,event):
        global G_FILE_LOG_EXE
        dlg = LogReader(None, -1, "")
        try:
            dlg.SetFile(G_FILE_LOG_EXE)
            dlg.ShowModal()
        except IOError:
            dlg = wx.MessageDialog ( self, _("Bug Log is not available! \o/"), _("Log is not available"),style=wx.OK)
            dlg.ShowModal()
        
    def OnLogSMS(self,event):
        global G_FILE_LOG_MSG
        dlg = LogReader(None, -1, "")
        try:
            dlg.SetFile(G_FILE_LOG_MSG)
            dlg.ShowModal()
        except IOError:
            dlg = wx.MessageDialog ( self, _("Message Log is not available"), _("Log is not available"),style=wx.OK)
            dlg.ShowModal()
        
    def OnLogEvents(self,event):
        global G_FILE_LOG
        dlg = LogReader(None, -1, "")
        try:
            dlg.SetFile(G_FILE_LOG)
            dlg.ShowModal()
        except IOError:
            dlg = wx.MessageDialog ( self, _("Event Log is not available"), _("Log is not available"),style=wx.OK)
            dlg.ShowModal()
    
    def OnAddContact(self,event):
        global G_FILE_ADD
        lisaa = Kysy(None, -1, "")
        lisaa.SetLabels( _("Name"),_("GSM"),_("Apply"),_("Add new contact"))
        lisaa.ShowModal()
        if len(lisaa.eka.GetValue())>0 and len(lisaa.toka.GetValue())>0:
            f = open(G_FILE_ADD,"a")
            f.write(lisaa.eka.GetValue() + ";"+lisaa.toka.GetValue()+"\n")
            f.close()
            f = open(G_FILE_ADD,"r")
            f.close()
            self.__reload_contacts()
        else:
            dlg = wx.MessageDialog ( self, _("Both fields must be filled!"), _("Contact information not added"),style=wx.OK)
            dlg.ShowModal()
    def OnMuokkaaOsoitekirjaa(self,event):
        pass
        
    def tuoVCF(self,filename):
        global G_FILE_ADD
        f = open(filename,"r")
        dat = f.read()
        f.close()
        try:
            nimi = re.findall(r"N:.*;;;",dat)[0].replace("N:","").replace(";;;","").replace(";"," ")
        except IndexError:
            try:
                nimi = re.findall(r"ORG:.*;;;",dat)[0].replace("ORG:","").replace(";;;","").replace(";"," ")
            except IndexError:
                return
        try:
            puh = re.findall(r"TEL;CELL:[0-9+ ]*",dat)[0].replace("TEL;CELL:","")
        except IndexError:
            try:
                puh = re.findall(r"TEL;CELL:[0-9+ ]*",dat)[0].replace("TEL;VOICE:","")
            except IndexError:
                return
        f = open(G_FILE_ADD,"a")
        f.write(nimi+";"+puh+"\n")
        f.close()
        self.__reload_contacts()

    def OnImportCSV(self,event):
        self.frmSaunaSMS_statusbar.SetStatusText(_("importing contact.."), 2)
        dlg = wx.FileDialog(self,_("Select file for VCF / VCard import"),style=wx.OPEN)
        dlg.SetWildcard("*.vcf")
        if dlg.ShowModal() == wx.ID_OK:
            self.tuoVCF(dlg.GetPath())
        self.frmSaunaSMS_statusbar.SetStatusText(_("contact has been imported!"), 2)
    
    def OnImportCSVUseita(self,event):
        self.frmSaunaSMS_statusbar.SetStatusText(_("importing contacts.."), 2)
        dlg = wx.DirDialog(self,_("Select folder for VCF / VCard import"),style=wx.OPEN)
        if dlg.ShowModal() == wx.ID_OK:
            for root, dirs, files in os.walk(dlg.GetPath()):
                for name in files:
                    if (name[len(name)-4:]==".vcf"):
                        self.tuoVCF(os.path.join(root, name))
        self.frmSaunaSMS_statusbar.SetStatusText(_("contacts have been imported!"), 2)
    def OnImportPCSuite(self,event):
        pass
        
    def OnNewSMS(self,event):
        self.txtviesti.SetValue("")
        self.txtvastaanottaja.SetValue("")
        
    def OnCheckStats(self,event):
        self.frmSaunaSMS_statusbar.SetStatusText(_("checking balance.."), 2)
        (nok,data,senders) = testLogin(self.username,self.password)
        if nok==False:
            wx.MessageBox(_("You Have")+":\n\n%s" % data,_("Check Balance"))
        else:
            wx.MessageBox(_("Connection failed to oma.saunalahti.fi!"),_("Check Balance"))
        self.frmSaunaSMS_statusbar.SetStatusText(_("Balance checked."), 2)

    def Log(self,msg):
       global G_FILE_LOG
       try:
        msg = "["+self.GetStamp()+"] "+msg+"\n"
        f = open(G_FILE_LOG,"a")
        f.write(msg)
        f.close()
       except TypeError:
        pass
        
    def OnSendSMS(self,event):
       global G_FILE_LOG_MSG
       sender = self.cmbLahettaja.GetValue()
       recipient = self.txtvastaanottaja.GetValue()
       try:
            s = long(sender)
       except:
            wx.MessageBox(_("The value of sender field is not numeric!"),_("Sending failed."))
            return False
       try:
            s = long(recipient.replace(",",""))
       except:
            wx.MessageBox(_("The value of recipient field is not numeric!"),_("Sending failed."))
            return False
       sms = self.txtviesti.GetValue()
       if len(sms)==0:
               msg = _("The message length was zero. Message not sent!")
               self.Log(msg)
               wx.MessageBox(msg,"Info")
               return False
       dlg = wx.MessageDialog(self, _("Do you want to send")+":\n%s\n\n"+_("Recipient(s)")+": %s\n"+_("Sender")+": %s" % (sms,recipient,sender),_("Sending Message"), wx.YES | wx.NO | wx.ICON_INFORMATION)
       if dlg.ShowModal() == wx.ID_YES:
          pass
       elif dlg.ShowModal() == wx.ID_NO:
          self.Log(_("Sending cancelled!"))
          dlg.Destroy()
          return 0
       dlg.Destroy()

       self.Log(_("Message is being sent")+"!")
       self.frmSaunaSMS_statusbar.SetStatusText(_("Message is being sent")+"..", 2)
       password = self.password
       username = self.username
       msg = ""
       d = prepareData(sendSms(username,password,sender,recipient,sms))
       f = open(G_FILE_LOG_MSG,"a")
       f.write(sender+";"+recipient+";"+prepareSMSForLog(sms)+";"+self.GetStamp()+"\n")
       f.close()
       msg += _("Status")+": "+sentStatus(d) + "\n"
       msg += _("Sent")+": %s/%s\n" % (totalSent(d),str(int(smsLeftMonth(d))+int(totalSent(d))))
       msg += _("Left")+": %s\n" % str(int(smsLeftMonth(d))+int(smsLeftTemp(d)))
       self.Log(msg)
       self.frmSaunaSMS_statusbar.SetStatusText(sentStatus(d), 2)
       wx.MessageBox(sentStatus(d),_("Message sent succesfully! :)"))

    def GetStamp(self):
        return time.strftime("%x %X")
    def OnAddReceiver(self,event):
       cur = self.txtvastaanottaja.GetValue()
       sel = self.book[self.lstosoitekirja.GetSelection()].split(";")[1]
       d = (cur + " " + sel).strip().replace(" ",",")
       self.txtvastaanottaja.SetValue(d)
    def OnIconify(self,event):
        self.Hide()



    def OnWrite(self,evt):
       pituus = len(self.txtviesti.GetValue())
       msg = str(pituus)+" ("+str(pituus/160+1)+")"
       self.frmSaunaSMS_statusbar.SetStatusText(msg, 1)
# Show the dialog

#dialog.ShowModal()
# end of class SaunaSMS2
def LoadGlobals():
    global G_UI_LANGUAGE,G_CON_ACCEPT_ENCODING,G_CON_REFERER,G_CON_USERAGENT,G_CON_DEFAULT_SENDER,G_QUICK_NEW
    global G_QUICK_SEND,G_QUICK_BALANCE,G_QUICK_QUIT,G_QUICK_NEW_CONTACT,G_QUICK_IMPORT_VCARD_ONE
    global G_QUICK_IMPORT_VCARD_MULTIPLE,G_QUICK_PROPERTIES,G_QUICK_LANGUAGE,G_QUICK_HELP
    G_UI_LANGUAGE = GetValue("GUI","G_UI_LANGUAGE",G_UI_LANGUAGE)
    G_CON_ACCEPT_ENCODING = GetValue("Connection", "G_CON_ACCEPT_ENCODING",G_CON_ACCEPT_ENCODING)
    G_CON_REFERER = GetValue("Connection", "G_CON_REFERER",G_CON_REFERER)
    G_CON_USERAGENT = GetValue("Connection", "G_CON_USERAGENT",G_CON_USERAGENT)
    G_CON_DEFAULT_SENDER = GetValue("SMS", "G_CON_DEFAULT_SENDER",G_CON_DEFAULT_SENDER)
    G_QUICK_NEW = GetValue("Shortcuts", "G_QUICK_NEW",G_QUICK_NEW)
    G_QUICK_SEND =  GetValue("Shortcuts", "G_QUICK_SEND",G_QUICK_SEND)
    G_QUICK_BALANCE =  GetValue("Shortcuts", "G_QUICK_BALANCE",G_QUICK_BALANCE)
    G_QUICK_QUIT =  GetValue("Shortcuts", "G_QUICK_QUIT",G_QUICK_QUIT)
    G_QUICK_NEW_CONTACT = GetValue("Shortcuts", "G_QUICK_NEW_CONTACT",G_QUICK_NEW_CONTACT)
    G_QUICK_IMPORT_VCARD_ONE = GetValue("Shortcuts", "G_QUICK_IMPORT_VCARD_ONE",G_QUICK_IMPORT_VCARD_ONE)
    G_QUICK_IMPORT_VCARD_MULTIPLE = GetValue("Shortcuts", "G_QUICK_IMPORT_VCARD_MULTIPLE",G_QUICK_IMPORT_VCARD_MULTIPLE)
    G_QUICK_PROPERTIES = GetValue("Shortcuts", "G_QUICK_PROPERTIES",G_QUICK_PROPERTIES)
    G_QUICK_LANGUAGE = GetValue("Shortcuts", "G_QUICK_LANGUAGE",G_QUICK_LANGUAGE)
    G_QUICK_HELP = GetValue("Shortcuts", "G_QUICK_HELP",G_QUICK_HELP)

class MyApp(wx.App):
    def __init__(self, redirect=False, filename=None):
        wx.App.__init__(self, redirect, filename)

        self.login = Login(None, -1, "")
        self.login.Centre()
        self.logged = False
        self.login.login.Bind(wx.EVT_BUTTON,self.Login)
        self.login.Show()
        self.login.Bind(wx.EVT_CLOSE,self.OnClose)
        self.Bind(wx.EVT_CLOSE,self.OnClose)
        #self.mylocale = wx.Locale()
        #self.mylocale.AddCatalogLookupPathPrefix('.')
        #self.mylocale.AddCatalog(G_UI_LANGUAGE)
        icon = wx.Icon("favicon.ico", wx.BITMAP_TYPE_ICO)
        self.tbicon = wx.TaskBarIcon()
        wx.EVT_TASKBAR_RIGHT_UP(self.tbicon, self.OnTaskBarRight)
        wx.EVT_TASKBAR_LEFT_UP(self.tbicon, self.OnTaskBarLeft)
        
        self.tbicon.SetIcon(icon, G_SW_NAME)
        
    def OnClose(self,evt):
        dlg = wx.MessageDialog(None, _("Are you sure?"), _("Software is been closed"), wx.YES_NO | wx.NO_DEFAULT | wx.ICON_QUESTION)
        if (dlg.ShowModal() == wx.ID_YES):
            self.tbicon.RemoveIcon()
            app.ExitMainLoop()
            
    def OnTaskBarRight(self,event):
        if (self.logged):
            self.frame.Hide()
        else:
            self.login.Hide()
    def OnTaskBarLeft(self,event):
        if (self.logged):
            self.frame.Show()
            self.frame.Restore()
        else:
            self.login.Show()
            self.login.Restore()
         
    def Login(self,evt):
       global G_CON_USERAGENT, G_SW_NAME,G_CON_DEFAULT_SENDER
       global G_QUICK_NEW, G_FILE_QUICK, G_QUICK_HELP, G_QUICK_LANGUAGE, G_QUICK_PROPERTIES, G_QUICK_SEND, G_QUICK_BALANCE, G_QUICK_QUIT
       global G_QUICK_NEW_CONTACT, G_QUICK_IMPORT_VCARD_ONE, G_QUICK_IMPORT_VCARD_MULTIPLE

       self.login.login.SetLabel(_("Logging in.."))
       (nok,data,senders) = testLogin(self.login.username.GetValue(),self.login.password.GetValue())
       if nok==False:
            wx.MessageBox("%s" % data,_("Login approved!"))

            self.logged = True
            global G_FILE_CFG
            SetValue("Connection","Username",self.login.username.GetValue())
            G_FILE_CFG = self.login.username.GetValue() + ".cfg"
            LoadGlobals()
            self.frame = SaunaSMS(None,-1,"")
            self.frame.Centre()
            self.frame.cmbLahettaja.SetItems(senders)
            
            try:
                self.frame.cmbLahettaja.SetSelection(senders.index(G_CON_DEFAULT_SENDER))
            except ValueError:
                G_CON_DEFAULT_SENDER = senders[0]
                SetValue("SMS","G_CON_DEFAULT_SENDER",G_CON_DEFAULT_SENDER)

            self.frame.cmbLahettaja.SetSelection(0)

            self.login.Hide()
            self.frame.username = self.login.username.GetValue()
            self.frame.password = self.login.password.GetValue()
            del self.login       

            self.frame.frmSaunaSMS_statusbar.SetStatusText(_("Welcome")+" %s" % self.frame.username, 0)
            self.frame.SetTitle(G_SW_NAME + " - " + self.frame.username)

            self.frame.Show()
       else:
            wx.MessageBox(nok,_("Login failed!"))
            self.login.login.SetLabel(_("Login"))

if __name__ == "__main__":
    G_UI_LANGUAGE = GetValue("GUI","G_UI_LANGUAGE",G_UI_LANGUAGE)
    app = MyApp()
    app.MainLoop()
